Given an array of integers nums and an integer k. A continuous subarray is called nice if there are k odd numbers on it.

Return the number of nice sub-arrays.

 

Example 1:

Input: nums = [1,1,2,1,1], k = 3
Output: 2
Explanation: The only sub-arrays with 3 odd numbers are [1,1,2,1] and [1,2,1,1].
Example 2:

Input: nums = [2,4,6], k = 1
Output: 0
Explanation: There are no odd numbers in the array.

class Solution:
    def numberOfSubarrays(self, nums: List[int], k: int) -> int:
        n=len(nums)
        a=[]
        d1={}
        d2={}
        count=0
        for i in range(n):
            if nums[i]%2!=0:
                a.append(i)
        for i in range(n):
            if nums[i]%2==0:
                count+=1
            else:
                d1[i]=count
                count=0
        count=0
        for i in range(n-1,-1,-1):
            if nums[i]%2==0:
                count+=1
            else:
                d2[i]=count
                count=0
      
        m=len(a)
        i=0
        j=0
        
        res=0
        while i<m and j<m:
           
            if j-i+1==k:
                res+=(d1[a[i]]+1)*(d2[a[j]]+1)
                j+=1
                i+=1
            else:
                j+=1
        return res


        
