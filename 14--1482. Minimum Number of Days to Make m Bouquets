You are given an integer array bloomDay, an integer m and an integer k.

You want to make m bouquets. To make a bouquet, you need to use k adjacent flowers from the garden.

The garden consists of n flowers, the ith flower will bloom in the bloomDay[i] and then can be used in exactly one bouquet.

Return the minimum number of days you need to wait to be able to make m bouquets from the garden. If it is impossible to make m bouquets return -1.

 

Example 1:

Input: bloomDay = [1,10,3,10,2], m = 3, k = 1
Output: 3
Explanation: Let us see what happened in the first three days. x means flower bloomed and _ means flower did not bloom in the garden.
We need 3 bouquets each should contain 1 flower.
After day 1: [x, _, _, _, _]   // we can only make one bouquet.
After day 2: [x, _, _, _, x]   // we can only make two bouquets.
After day 3: [x, _, x, _, x]   // we can make 3 bouquets. The answer is 3.


class Solution:
    def minDays(self, bloomDay: List[int], m: int, k: int) -> int:
        n=len(bloomDay)
        if n<(m*k):
            return -1
        s=set()
        for i in range(n):
            s.add(bloomDay[i])
        s=list(s)
        s.sort()
        slen=len(s)
        a=bloomDay[:]
        low=0
        high=slen-1
        b=[]
        while low<=high:
            mid=(low+high)//2
            print(low)
            print(high)
            print(mid)
            cur=s[mid]
            for j in range(n):
                # print(i,j)
                if bloomDay[j]<=cur:
                    bloomDay[j]=float("inf")
            count=0
            res=0
            for j in range(n):
                if bloomDay[j]==float("inf"):
                    count+=1
                else:
                    res+=count//k
                    count=0
            res+=count//k
            # print(res)
            print(cur,res)
            bloomDay=a[:]
            if res>=m:
                b.append(cur)
                high=mid-1
            else:
                low=mid+1
        return min(b)
